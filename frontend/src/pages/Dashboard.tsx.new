import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import { 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Wrench,
  Calendar,
  DollarSign
} from 'lucide-react';
import { motion } from 'framer-motion';
import Navbar from '@/components/Navbar';
import { reportService, machineService, serviceOrderService } from '../services/api';
import { ServiceOrder, Machine, MaintenanceType } from '../types/models';
import { ChartContainer } from '@/components/ui/chart';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [dashboardData, setDashboardData] = useState({
    totalMachines: 0,
    activeMachines: 0,
    maintenanceStatus: {
      preventive: 0,
      corrective: 0,
      pending: 0,
    },
    costsByCategory: [],
    maintenanceTypes: [],
    recentServiceOrders: [] as ServiceOrder[],
    machinesNeedingMaintenance: [] as Machine[]
  });

  const { data: machines } = useQuery({
    queryKey: ['machines'],
    queryFn: machineService.getAll,
  });

  const { data: serviceOrders } = useQuery({
    queryKey: ['serviceOrders'],
    queryFn: serviceOrderService.getAll,
  });

  const { data: dashboardStats } = useQuery({
    queryKey: ['dashboardStats'],
    queryFn: reportService.getDashboardMetrics,
  });

  useEffect(() => {
    if (machines?.data && serviceOrders?.data && dashboardStats?.data) {
      setDashboardData({
        totalMachines: machines.data.length,
        activeMachines: machines.data.filter((m: Machine) => m.status === 'ACTIVE').length,
        maintenanceStatus: {
          preventive: serviceOrders.data.filter((so: ServiceOrder) => so.maintenanceType === MaintenanceType.PREVENTIVE).length,
          corrective: serviceOrders.data.filter((so: ServiceOrder) => so.maintenanceType === MaintenanceType.CORRECTIVE).length,
          pending: serviceOrders.data.filter((so: ServiceOrder) => so.status === 'PENDING').length,
        },
        costsByCategory: dashboardStats.data.costsByCategory || [],
        maintenanceTypes: dashboardStats.data.maintenanceTypes || [],
        recentServiceOrders: serviceOrders.data.slice(0, 5),
        machinesNeedingMaintenance: dashboardStats.data.machinesNeedingMaintenance || []
      });
    }
  }, [machines, serviceOrders, dashboardStats]);

  // Definir cores para os gráficos
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

  // Simulação de dados quando o backend não responde
  const simulatedData = {
    costsByCategory: [
      { name: 'Peças', value: 4000 },
      { name: 'Mão de obra', value: 3000 },
      { name: 'Ferramentas', value: 2000 },
      { name: 'Transporte', value: 1000 },
      { name: 'Outros', value: 500 },
    ],
    maintenanceTypes: [
      { name: 'Preventiva', value: 10 },
      { name: 'Corretiva', value: 15 },
      { name: 'Preditiva', value: 5 },
      { name: 'Rotina', value: 20 },
    ],
  };

  // Usar dados simulados caso o backend não retorne informações
  const costsByCategory = dashboardData.costsByCategory.length > 0 
    ? dashboardData.costsByCategory 
    : simulatedData.costsByCategory;

  const maintenanceTypes = dashboardData.maintenanceTypes.length > 0 
    ? dashboardData.maintenanceTypes 
    : simulatedData.maintenanceTypes;

  // Helper para formatar valores monetários
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(value);
  };

  const totalCost = costsByCategory.reduce((acc, curr) => acc + curr.value, 0);

  return (
    <div className="min-h-screen bg-background pb-20">
      <Navbar />

      <main className="container pt-28 pb-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
              <p className="text-muted-foreground">
                Visão geral do sistema de gerenciamento de manutenção
              </p>
            </div>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="overview">Visão Geral</TabsTrigger>
              <TabsTrigger value="maintenance">Manutenções</TabsTrigger>
              <TabsTrigger value="costs">Custos</TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview" className="mt-0">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Total de Máquinas</CardTitle>
                      <Wrench className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{dashboardData.totalMachines}</div>
                      <p className="text-xs text-muted-foreground">
                        {dashboardData.activeMachines} ativas
                      </p>
                    </CardContent>
                  </Card>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Manutenções Pendentes</CardTitle>
                      <Clock className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{dashboardData.maintenanceStatus.pending}</div>
                      <p className="text-xs text-muted-foreground">
                        {dashboardData.maintenanceStatus.preventive + dashboardData.maintenanceStatus.corrective} concluídas este mês
                      </p>
                    </CardContent>
                  </Card>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                >
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Custo Total</CardTitle>
                      <DollarSign className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{formatCurrency(totalCost)}</div>
                      <p className="text-xs text-muted-foreground">+12% em relação ao mês anterior</p>
                    </CardContent>
                  </Card>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                >
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Próximas Manutenções</CardTitle>
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {dashboardData.machinesNeedingMaintenance.length}
                      </div>
                      <p className="text-xs text-muted-foreground">Máquinas com manutenção próxima</p>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7 mt-4">
                <motion.div
                  className="md:col-span-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                >
                  <Card className="h-full">
                    <CardHeader>
                      <CardTitle>Custos por Categoria</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ChartContainer 
                        className="h-[300px]"
                        config={{
                          cost: {
                            theme: {
                              light: '#0088FE',
                              dark: '#0088FE'
                            }
                          },
                        }}
                      >
                        <ResponsiveContainer width="100%" height="100%">
                          <BarChart data={costsByCategory}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="name" />
                            <YAxis tickFormatter={(value) => `R$ ${value}`} />
                            <RechartsTooltip
                              content={({ active, payload, label }) => {
                                if (active && payload && payload.length) {
                                  return (
                                    <div className="rounded-lg border bg-background p-2 shadow-sm">
                                      <div className="grid grid-cols-2 gap-2">
                                        <div className="flex flex-col">
                                          <span className="text-[0.70rem] uppercase text-muted-foreground">
                                            {label}
                                          </span>
                                          <span className="font-bold text-muted-foreground">
                                            {payload[0].value}
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                  );
                                }
                                return null;
                              }}
                            />
                            <Legend />
                            <Bar 
                              dataKey="value" 
                              name="Valor" 
                              fill="#0088FE" 
                              radius={[4, 4, 0, 0]} 
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </ChartContainer>
                    </CardContent>
                  </Card>
                </motion.div>

                <motion.div
                  className="md:col-span-3"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.6 }}
                >
                  <Card className="h-full">
                    <CardHeader>
                      <CardTitle>Manutenções por Tipo</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ChartContainer 
                        className="h-[300px]"
                        config={{
                          maintenance: {
                            theme: {
                              light: '#00C49F',
                              dark: '#00C49F'
                            }
                          },
                        }}
                      >
                        <ResponsiveContainer width="100%" height="100%">
                          <PieChart>
                            <Pie
                              data={maintenanceTypes}
                              cx="50%"
                              cy="50%"
                              labelLine={false}
                              outerRadius={100}
                              fill="#8884d8"
                              dataKey="value"
                              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                            >
                              {maintenanceTypes.map((_, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                              ))}
                            </Pie>
                            <RechartsTooltip
                              content={({ active, payload, label }) => {
                                if (active && payload && payload.length) {
                                  return (
                                    <div className="rounded-lg border bg-background p-2 shadow-sm">
                                      <div className="grid grid-cols-2 gap-2">
                                        <div className="flex flex-col">
                                          <span className="text-[0.70rem] uppercase text-muted-foreground">
                                            {label}
                                          </span>
                                          <span className="font-bold text-muted-foreground">
                                            {payload[0].value}
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                  );
                                }
                                return null;
                              }}
                            />
                          </PieChart>
                        </ResponsiveContainer>
                      </ChartContainer>
                    </CardContent>
                  </Card>
                </motion.div>
              </div>

              <div className="mt-4">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.7 }}
                >
                  <Card>
                    <CardHeader>
                      <CardTitle>Ordens de Serviço Recentes</CardTitle>
                    </CardHeader>
                    <CardContent>
                      {serviceOrders && serviceOrders.data ? (
                        <div className="space-y-4">
                          {dashboardData.recentServiceOrders.map((order) => (
                            <div key={order.id} className="flex items-center justify-between border-b pb-2">
                              <div className="flex items-center">
                                {order.status === 'COMPLETED' ? (
                                  <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                                ) : order.status === 'PENDING' ? (
                                  <Clock className="h-5 w-5 text-yellow-500 mr-2" />
                                ) : (
                                  <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />
                                )}
                                <div>
                                  <div className="font-medium">OS #{order.orderNumber}</div>
                                  <div className="text-sm text-muted-foreground">
                                    {order.machine?.name || 'Máquina não especificada'}
                                  </div>
                                </div>
                              </div>
                              <div className="text-sm">
                                <div>{new Date(order.startDate).toLocaleDateString('pt-BR')}</div>
                                <div className={`text-xs ${
                                  order.status === 'COMPLETED' 
                                    ? 'text-green-500' 
                                    : order.status === 'PENDING' 
                                      ? 'text-yellow-500' 
                                      : 'text-red-500'
                                }`}>
                                  {order.status === 'COMPLETED' 
                                    ? 'Concluído' 
                                    : order.status === 'PENDING' 
                                      ? 'Pendente' 
                                      : order.status === 'IN_PROGRESS'
                                        ? 'Em Andamento'
                                        : 'Cancelado'}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="flex justify-center py-4">
                          <p>Carregando ordens de serviço...</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              </div>
            </TabsContent>

            <TabsContent value="maintenance" className="mt-0">
              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Histórico de Manutenções</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ChartContainer 
                      className="h-[300px]"
                      config={{
                        preventive: {
                          theme: {
                            light: '#0088FE',
                            dark: '#0088FE'
                          }
                        },
                        corrective: {
                          theme: {
                            light: '#FF8042',
                            dark: '#FF8042'
                          }
                        },
                      }}
                    >
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={[
                            { month: 'Jan', preventive: 5, corrective: 3 },
                            { month: 'Fev', preventive: 7, corrective: 2 },
                            { month: 'Mar', preventive: 4, corrective: 5 },
                            { month: 'Abr', preventive: 6, corrective: 1 },
                            { month: 'Mai', preventive: 8, corrective: 2 },
                            { month: 'Jun', preventive: 9, corrective: 3 },
                          ]}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis />
                          <RechartsTooltip
                            content={({ active, payload, label }) => {
                              if (active && payload && payload.length) {
                                return (
                                  <div className="rounded-lg border bg-background p-2 shadow-sm">
                                    <div className="grid grid-cols-2 gap-2">
                                      <div className="flex flex-col">
                                        <span className="text-[0.70rem] uppercase text-muted-foreground">
                                          {label}
                                        </span>
                                        <span className="font-bold text-muted-foreground">
                                          {payload[0].value}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              }
                              return null;
                            }}
                          />
                          <Legend />
                          <Bar dataKey="preventive" name="Preventiva" fill="#0088FE" />
                          <Bar dataKey="corrective" name="Corretiva" fill="#FF8042" />
                        </BarChart>
                      </ResponsiveContainer>
                    </ChartContainer>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Máquinas Críticas</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {machines && machines.data ? (
                      <div className="space-y-4">
                        {dashboardData.machinesNeedingMaintenance.map((machine) => (
                          <div key={machine.id} className="flex items-center justify-between border-b pb-2">
                            <div className="flex items-center">
                              <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />
                              <div>
                                <div className="font-medium">{machine.name}</div>
                                <div className="text-sm text-muted-foreground">
                                  {machine.model} - {machine.serialNumber}
                                </div>
                              </div>
                            </div>
                            <div className="text-sm">
                              <div>Última manutenção:</div>
                              <div className="text-xs text-red-500">
                                {machine.lastMaintenanceDate 
                                  ? new Date(machine.lastMaintenanceDate).toLocaleDateString('pt-BR')
                                  : 'Nunca'}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="flex justify-center py-4">
                        <p>Carregando máquinas...</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="costs" className="mt-0">
              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Custos por Período</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ChartContainer 
                      className="h-[300px]"
                      config={{
                        cost: {
                          theme: {
                            light: '#0088FE',
                            dark: '#0088FE'
                          }
                        },
                      }}
                    >
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={[
                            { month: 'Jan', cost: 4000 },
                            { month: 'Fev', cost: 3000 },
                            { month: 'Mar', cost: 5000 },
                            { month: 'Abr', cost: 2780 },
                            { month: 'Mai', cost: 1890 },
                            { month: 'Jun', cost: 2390 },
                          ]}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis tickFormatter={(value) => `R$ ${value}`} />
                          <RechartsTooltip
                            content={({ active, payload, label }) => {
                              if (active && payload && payload.length) {
                                return (
                                  <div className="rounded-lg border bg-background p-2 shadow-sm">
                                    <div className="grid grid-cols-2 gap-2">
                                      <div className="flex flex-col">
                                        <span className="text-[0.70rem] uppercase text-muted-foreground">
                                          {label}
                                        </span>
                                        <span className="font-bold text-muted-foreground">
                                          {payload[0].value}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              }
                              return null;
                            }}
                          />
                          <Legend />
                          <Bar dataKey="cost" name="Custo" fill="#0088FE" />
                        </BarChart>
                      </ResponsiveContainer>
                    </ChartContainer>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Distribuição de Custos</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ChartContainer 
                      className="h-[300px]"
                      config={{
                        parts: {
                          theme: {
                            light: '#0088FE',
                            dark: '#0088FE'
                          }
                        },
                        labor: {
                          theme: {
                            light: '#00C49F',
                            dark: '#00C49F'
                          }
                        },
                        other: {
                          theme: {
                            light: '#FFBB28',
                            dark: '#FFBB28'
                          }
                        },
                      }}
                    >
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={[
                              { name: 'Peças', value: 4000 },
                              { name: 'Mão de obra', value: 3000 },
                              { name: 'Outros', value: 1500 },
                            ]}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            outerRadius={100}
                            fill="#8884d8"
                            dataKey="value"
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                          >
                            <Cell fill="#0088FE" />
                            <Cell fill="#00C49F" />
                            <Cell fill="#FFBB28" />
                          </Pie>
                          <RechartsTooltip
                            content={({ active, payload, label }) => {
                              if (active && payload && payload.length) {
                                return (
                                  <div className="rounded-lg border bg-background p-2 shadow-sm">
                                    <div className="grid grid-cols-2 gap-2">
                                      <div className="flex flex-col">
                                        <span className="text-[0.70rem] uppercase text-muted-foreground">
                                          {label}
                                        </span>
                                        <span className="font-bold text-muted-foreground">
                                          {payload[0].value}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              }
                              return null;
                            }}
                          />
                        </PieChart>
                      </ResponsiveContainer>
                    </ChartContainer>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </motion.div>
      </main>
    </div>
  );
};

export default Dashboard; 